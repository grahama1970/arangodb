"""
ArangoDB CLI Main Module

This module provides the main entry point and CLI application for ArangoDB operations.
It combines all command groups and handles common configuration and setup.

Command Groups:
- search: Search operations (BM25, semantic, hybrid, etc.)
- crud: CRUD operations for documents (Create, Read, Update, Delete)
- graph: Graph traversal and relationship management
- memory: Memory agent operations for conversation storage
- community: Community detection and management in the knowledge graph

Sample Input:
- CLI command: arangodb search bm25 "query text"
- CLI command: arangodb memory store --conversation-id "abc123" --user-message "Hello" --agent-response "Hi"

Expected Output:
- Console-formatted tables or JSON output based on the specific command
"""

import os
import sys
import typer
from loguru import logger
from rich.console import Console
from typing import Optional

# Import command groups
from arangodb.cli.search_commands import get_search_app
from arangodb.cli.crud_commands import get_crud_app
from arangodb.cli.graph_commands import get_graph_app
from arangodb.cli.memory_commands import get_memory_app
from arangodb.cli.community_commands import app as community_app
from arangodb.cli.episode_commands import app as episode_app
from arangodb.cli.contradiction_commands import app as contradiction_app
from arangodb.cli.search_config_commands import app as search_config_app

# Import core utilities
from arangodb.core.utils.log_utils import truncate_large_value

# Initialize Rich console
console = Console()

# Create the main app
app = typer.Typer(
    name="arangodb-cli",
    help="Command-line interface for ArangoDB operations",
    add_completion=False,
    rich_markup_mode="markdown",  # Enable markdown in help text
)

# Add command groups
search_app = get_search_app()
app.add_typer(search_app, name="search")

crud_app = get_crud_app()
app.add_typer(crud_app, name="crud")

graph_app = get_graph_app()
app.add_typer(graph_app, name="graph")

memory_app = get_memory_app()
app.add_typer(memory_app, name="memory")

app.add_typer(community_app, name="community")

app.add_typer(episode_app, name="episode")

app.add_typer(contradiction_app, name="contradiction")

app.add_typer(search_config_app, name="config")

# --- Global Configuration & Logging Setup ---
@app.callback()
def main_callback(
    log_level: str = typer.Option(
        os.environ.get("LOG_LEVEL", "INFO").upper(),
        "--log-level",
        "-l",
        help="Set logging level (DEBUG, INFO, WARNING, ERROR).",
        envvar="LOG_LEVEL",
    ),
):
    """Main callback to configure logging for the CLI."""
    # Allow standard logging levels
    log_level = log_level.upper()
    valid_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
    if log_level not in valid_levels:
        print(
            f"Warning: Invalid log level '{log_level}'. Defaulting to INFO.",
            file=sys.stderr,
        )
        log_level = "INFO"

    logger.remove()  # Remove default handler
    logger.add(
        sys.stderr,
        level=log_level,
        format="{time:HH:mm:ss} | {level: <7} | {message}",
        backtrace=False,
        diagnose=False,  # Keep diagnose False for production CLI
    )
    
    # Initialize any global resources needed for the CLI
    logger.debug("Initializing CLI environment...")
    
    # Note: We will add caching initialization and other setup here
    # as needed in future refactoring.
    
    logger.debug("CLI environment initialized.")


if __name__ == "__main__":
    """Run the CLI application when executed directly."""
    app()