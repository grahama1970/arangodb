{
  "test_errors": [
    {
      "error_type": "FileNotFoundError",
      "message": "No such file or directory: 'nonexistent_file.py'",
      "component": "chunking",
      "severity": "warning",
      "fallback_action": "skip_file"
    },
    {
      "error_type": "SyntaxError", 
      "message": "Invalid syntax in file.py:23",
      "component": "parser",
      "severity": "error",
      "fallback_action": "use_simple_parser"
    },
    {
      "error_type": "ValueError",
      "message": "Invalid chunk size: -10",
      "component": "chunking",
      "severity": "critical",
      "fallback_action": "use_default_size"
    },
    {
      "error_type": "ConnectionError",
      "message": "Failed to connect to server",
      "component": "llm",
      "severity": "warning",
      "fallback_action": "retry"
    },
    {
      "error_type": "OutOfMemoryError",
      "message": "Not enough memory to process file",
      "component": "parser",
      "severity": "critical",
      "fallback_action": "skip_file"
    },
    {
      "error_type": "TimeoutError",
      "message": "Operation timed out after 30 seconds",
      "component": "llm",
      "severity": "error",
      "fallback_action": "retry_with_timeout"
    }
  ],
  "component_specific_errors": {
    "chunking": [
      {
        "error_type": "ChunkSizeError",
        "message": "Chunk size too small for meaningful chunks",
        "severity": "warning",
        "fallback_action": "use_default_size"
      },
      {
        "error_type": "EncodingError",
        "message": "Failed to encode file with UTF-8",
        "severity": "error",
        "fallback_action": "try_alternate_encoding"
      }
    ],
    "parser": [
      {
        "error_type": "TreeSitterError",
        "message": "Failed to parse file with tree-sitter",
        "severity": "error",
        "fallback_action": "use_regex_parser"
      },
      {
        "error_type": "UnsupportedLanguageError",
        "message": "Language not supported by tree-sitter",
        "severity": "warning",
        "fallback_action": "treat_as_text"
      }
    ],
    "markdown": [
      {
        "error_type": "MarkdownParseError",
        "message": "Failed to parse markdown",
        "severity": "error",
        "fallback_action": "treat_as_text"
      },
      {
        "error_type": "HeaderExtractionError",
        "message": "Failed to extract headers from markdown",
        "severity": "warning",
        "fallback_action": "use_simple_headers"
      }
    ],
    "llm": [
      {
        "error_type": "LLMResponseError",
        "message": "LLM returned invalid JSON",
        "severity": "error",
        "fallback_action": "retry_with_format_instructions"
      },
      {
        "error_type": "TokenLimitError",
        "message": "Input exceeds token limit",
        "severity": "warning",
        "fallback_action": "truncate_input"
      }
    ]
  },
  "expected_fallbacks": {
    "chunking": {
      "ChunkSizeError": "use_default_size",
      "EncodingError": "try_alternate_encoding",
      "FileNotFoundError": "skip_file",
      "default": "use_simple_chunking"
    },
    "parser": {
      "TreeSitterError": "use_regex_parser",
      "UnsupportedLanguageError": "treat_as_text",
      "SyntaxError": "use_simple_parser",
      "default": "skip_parsing"
    },
    "markdown": {
      "MarkdownParseError": "treat_as_text",
      "HeaderExtractionError": "use_simple_headers",
      "default": "skip_markdown"
    },
    "llm": {
      "LLMResponseError": "retry_with_format_instructions",
      "TokenLimitError": "truncate_input",
      "ConnectionError": "retry",
      "TimeoutError": "retry_with_timeout",
      "default": "skip_llm"
    },
    "default": "log_and_continue"
  }
}